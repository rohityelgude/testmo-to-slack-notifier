name: Testmo to Slack

on:
  workflow_dispatch: {}
  #schedule:
   # - cron: '30 5 * * *'  # Runs every day at 11:00 AM IST

jobs:
  send_testmo_results:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Restore cache of last notified run ID
        id: cache
        uses: actions/cache@v3
        with:
          path: last_run_id.txt
          key: last-run-id-cache
          
      - name: Get last notified run ID
        id: get_last_run
        run: |
          if [ -f last_run_id.txt ]; then
            echo "LAST_RUN_ID=$(cat last_run_id.txt)" >> $GITHUB_OUTPUT
          else
            echo "LAST_RUN_ID=" >> $GITHUB_OUTPUT
          fi

      - name: Get latest Testmo automation run
        id: get_run
        run: |
          echo "Fetching latest automation run from Testmo..."
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.TESTMO_API_TOKEN }}" \
            "https://${{ secrets.TESTMO_BASE_URL }}/api/v1/projects/1/automation/runs?limit=1")

          echo "$response" > latest_run.json

          total_runs=$(jq -r '.total' latest_run.json)
          latest_id=$(jq -r '.result[0].id' latest_run.json)
          echo "latest_id=$(jq -r '.result[0].id' latest_run.json)" >> $GITHUB_OUTPUT

          latest_status_code=$(jq -r '.result[0].status' latest_run.json)

          case $latest_status_code in
            1) latest_status="Queued" ;;
            2) latest_status="Passed" ;;
            3) latest_status="Failed" ;;
            4) latest_status="Aborted" ;;
            *) latest_status="Unknown" ;;
          esac

          detailed_response=$(curl -s -H "Authorization: Bearer ${{ secrets.TESTMO_API_TOKEN }}" \
            "https://${{ secrets.TESTMO_BASE_URL }}/api/v1/automation/runs/${latest_id}")

          echo "$detailed_response" > detailed_run.json

          run_name=$(jq -r '.result.name' detailed_run.json)
          success_count=$(jq -r '.result.success_count' detailed_run.json)
          failure_count=$(jq -r '.result.failure_count' detailed_run.json)
          skipped_count=$(jq -r '.result.status5_count' detailed_run.json)
          completed_count=$(jq -r '.result.completed_count' detailed_run.json)
          total_count=$(jq -r '.result.total_count' detailed_run.json)

          echo "total_runs=$total_runs" >> $GITHUB_OUTPUT
          echo "latest_id=$latest_id" >> $GITHUB_OUTPUT
          echo "latest_status=$latest_status" >> $GITHUB_OUTPUT
          echo "run_name=$run_name" >> $GITHUB_OUTPUT
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          echo "failure_count=$failure_count" >> $GITHUB_OUTPUT
          echo "skipped_count=$skipped_count" >> $GITHUB_OUTPUT
          echo "completed_count=$completed_count" >> $GITHUB_OUTPUT
          echo "total_count=$total_count" >> $GITHUB_OUTPUT


      - name: Check if new run exists
        id: check_new
        run: |
          if [ "${{ steps.get_run.outputs.latest_id }}" != "${{ steps.get_last_run.outputs.LAST_RUN_ID }}" ] && [ -n "${{ steps.get_run.outputs.latest_id }}" ]; then
            echo "new_run=true" >> $GITHUB_OUTPUT
          else
            echo "new_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug detailed run JSON
        run: |
          echo "Detailed Run JSON:"
          cat detailed_run.json
          echo "Extracted fields:"
          jq '.result.success_count, .result.failure_count, .result.completed_count, .result.total_count, .result.name, .result.status5_count' detailed_run.json

      - name: Send Slack message
        if: steps.check_new.outputs.new_run == 'true'
        run: |
          if [ -z "${{ steps.get_run.outputs.latest_id }}" ] || [ "${{ steps.get_run.outputs.latest_id }}" = "null" ]; then
            echo "No run found, skipping Slack notification."
            exit 0
          fi

          slack_message=":mega: Testmo Automation Runs: Total = ${{ steps.get_run.outputs.total_runs }}
          :calendar: Latest Run ID: #${{ steps.get_run.outputs.latest_id }} â€” ${{ steps.get_run.outputs.run_name }}
          :bar_chart: Status: ${{ steps.get_run.outputs.latest_status }}
          :white_check_mark: Passed: ${{ steps.get_run.outputs.success_count }}
          :x: Failed: ${{ steps.get_run.outputs.failure_count }}
          :confused: Skipped: ${{ steps.get_run.outputs.skipped_count }}
          :clipboard: Completed: ${{ steps.get_run.outputs.completed_count }} / ${{ steps.get_run.outputs.total_count }}
          :link: <https://${{ secrets.TESTMO_BASE_URL }}/automation/runs/print/${{ steps.get_run.outputs.latest_id }}|View Latest Run>
          :dart: <https://${{ secrets.TESTMO_BASE_URL }}/automation/runs/1|Overall Stats>"
          
          payload=$(jq -n --arg t "$slack_message" '{text: $t}')

          curl -X POST -H "Content-Type: application/json" --data "$payload" "${{ secrets.SLACK_WEBHOOK_URL }}"
     
      - name: Save latest run ID to cache file
        if: steps.check_new.outputs.new_run == 'true'
        run: echo "${{ steps.get_run.outputs.latest_id }}" > last_run_id.txt

      - name: Save cache
        if: steps.check_new.outputs.new_run == 'true'
        uses: actions/cache@v3
        with:
          path: last_run_id.txt
          key: last-run-id-cache
